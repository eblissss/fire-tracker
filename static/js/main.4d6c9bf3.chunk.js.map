{"version":3,"sources":["components/FireInfo.js","components/Map.js","components/Loader.js","components/Footer.js","components/CSVLoad.js","components/JSONLoad.js","App.js","reportWebVitals.js","index.js"],"names":["FireInfo","fileType","info","className","id","title","brightness","frp","vectorLayer","VectorLayer","style","Style","image","Icon","scale","src","fireMap","CreateMap","layers","TileLayer","source","OSM","zIndex","view","View","center","fromLonLat","zoom","Map","fireData","mapRef","useRef","useState","fireInfo","setFireInfo","useEffect","setTarget","current","undefined","setSource","on","e","feature","forEachFeatureAtPixel","pixel","get","ref","Loader","alt","Footer","setFile","onClick","CSVLoader","fileLocation","vectorSource","Vector","loader","XMLHttpRequest","open","onload","csv","responseText","fires","prevIndex","indexOf","currIndex","line","substr","split","coords","parseFloat","push","Feature","geometry","Point","addFeatures","send","a","fetch","response","json","events","event","categories","geometries","coordinates","link","date","JSONLoader","App","setFileType","setFireData","loading","setLoading","fetchFires","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.4d6c9bf3.chunk.js","sourcesContent":["const FireInfo = ({ fileType, info }) => {\r\n  if (fileType === \"json\" || fileType === \"api\") {\r\n    return (\r\n      <div className=\"fire-info\">\r\n        <h2>Fire Location Info</h2>\r\n        <ul>\r\n          <li>\r\n            ID: <strong>{info.id}</strong>\r\n          </li>\r\n          <li>\r\n            Title: <strong>{info.title}</strong>\r\n          </li>\r\n        </ul>\r\n      </div>\r\n    );\r\n  } else if (fileType === \"csv\") {\r\n    return (\r\n      <div className=\"fire-info\">\r\n        <h2>Fire Location Info</h2>\r\n        <ul>\r\n          <li>\r\n            Brightness (K): <strong>{info.brightness}</strong>\r\n          </li>\r\n          <li>\r\n            Fire Radiative Power (MW): <strong>{info.frp}</strong>\r\n          </li>\r\n        </ul>\r\n      </div>\r\n    );\r\n  }\r\n};\r\n\r\nexport default FireInfo;\r\n","import { useRef, useState, useEffect } from \"react\";\r\nimport FireInfo from \"./FireInfo\";\r\nimport { Map as CreateMap } from \"ol\";\r\nimport { Tile as TileLayer, Vector as VectorLayer } from \"ol/layer\";\r\nimport { fromLonLat } from \"ol/proj\";\r\nimport { OSM } from \"ol/source\";\r\nimport { Icon, Style } from \"ol/style\";\r\nimport View from \"ol/View\";\r\n\r\n// OL vector layer to update when new fileType requested\r\nlet vectorLayer = new VectorLayer({\r\n  style: new Style({\r\n    image: new Icon({\r\n      scale: [0.3, 0.3],\r\n      src: \"assets/fire.svg\",\r\n    }),\r\n  }),\r\n});\r\n\r\n// OL map with OSM tile layer and default view\r\nconst fireMap = new CreateMap({\r\n  layers: [\r\n    new TileLayer({\r\n      source: new OSM(),\r\n      zIndex: 0,\r\n    }),\r\n    vectorLayer,\r\n  ],\r\n  view: new View({\r\n    center: fromLonLat([-122.87, 42.32]),\r\n    zoom: 5,\r\n  }),\r\n});\r\n\r\nconst Map = ({ fireData, fileType }) => {\r\n  const mapRef = useRef();\r\n  const [fireInfo, setFireInfo] = useState(null);\r\n\r\n  useEffect(() => {\r\n    fireMap.setTarget(mapRef.current);\r\n\r\n    return () => {\r\n      fireMap.setTarget(undefined);\r\n    };\r\n  }, [mapRef]);\r\n\r\n  // Update vector layer with new fire data\r\n  useEffect(() => {\r\n    vectorLayer.setSource(fireData);\r\n  }, [fireData]);\r\n\r\n  // Checking for click\r\n  useEffect(() => {\r\n    // Triggers way too much sometimes, this keeps page from freezing\r\n    if (!fireInfo) {\r\n      fireMap.on(\"click\", function (e) {\r\n        let feature = fireMap.forEachFeatureAtPixel(\r\n          e.pixel,\r\n          (feature) => feature\r\n        );\r\n        if (feature) {\r\n          if (fileType === \"json\" || fileType === \"api\") {\r\n            setFireInfo({\r\n              id: feature.get(\"id\"),\r\n              title: feature.get(\"title\"),\r\n            });\r\n          } else if (fileType === \"csv\") {\r\n            setFireInfo({\r\n              brightness: feature.get(\"brightness\"),\r\n              frp: feature.get(\"frp\"),\r\n            });\r\n          }\r\n        } else {\r\n          setFireInfo(null);\r\n        }\r\n      });\r\n    }\r\n  });\r\n\r\n  return (\r\n    <div ref={mapRef} className=\"map\">\r\n      {fireInfo && <FireInfo info={fireInfo} fileType={fileType} />}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Map;\r\n","const Loader = () => {\r\n  return (\r\n    <div className=\"loader\">\r\n      <img src=\"assets/spinloader.svg\" alt=\"Loading\" />\r\n      <h1>Fetching Data</h1>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Loader;\r\n","const Footer = ({ setFile }) => {\r\n  return (\r\n    <footer className=\"footer\">\r\n      <div className=\"chooseFile\">\r\n        <button onClick={() => setFile(\"csv\")}>Use CSV</button>\r\n        <button onClick={() => setFile(\"json\")}>Use JSON</button>\r\n        <button onClick={() => setFile(\"api\")}>Use API</button>\r\n        {/* CHANGE TO API*/}\r\n      </div>\r\n      <h1>Wildfire Tracker</h1>\r\n    </footer>\r\n  );\r\n};\r\n\r\nexport default Footer;\r\n","import { Vector } from \"ol/source\";\r\nimport { fromLonLat } from \"ol/proj\";\r\nimport Feature from \"ol/Feature\";\r\nimport Point from \"ol/geom/Point\";\r\n\r\n/* Load fire data from CSV file,\r\n   specifically from VIIRS 375m / NOAA-20 accessible at\r\n   https://firms.modaps.eosdis.nasa.gov/active_fire/#firms-txt */\r\nfunction CSVLoader(fileLocation) {\r\n  const vectorSource = new Vector();\r\n\r\n  const loader = new XMLHttpRequest();\r\n  loader.open(\"GET\", fileLocation);\r\n\r\n  loader.onload = () => {\r\n    const csv = loader.responseText;\r\n    const fires = [];\r\n\r\n    let prevIndex = csv.indexOf(\"\\n\") + 1;\r\n    let currIndex = csv.indexOf(\"\\n\", prevIndex);\r\n\r\n    while ((currIndex = csv.indexOf(\"\\n\", prevIndex)) !== -1) {\r\n      const line = csv.substr(prevIndex, currIndex - prevIndex).split(\",\");\r\n\r\n      prevIndex = currIndex + 1;\r\n\r\n      const coords = fromLonLat([parseFloat(line[1]), parseFloat(line[0])]);\r\n\r\n      fires.push(\r\n        new Feature({\r\n          brightness: parseFloat(line[2]) || 0,\r\n          frp: parseFloat(line[11]) || 0,\r\n          geometry: new Point(coords),\r\n        })\r\n      );\r\n    }\r\n    vectorSource.addFeatures(fires);\r\n  };\r\n\r\n  loader.send();\r\n\r\n  return vectorSource;\r\n}\r\n\r\nexport default CSVLoader;\r\n","import { Vector } from \"ol/source\";\r\nimport { fromLonLat } from \"ol/proj\";\r\nimport Feature from \"ol/Feature\";\r\nimport Point from \"ol/geom/Point\";\r\n\r\n/* Load/Retrieve data in JSON format in form of,\r\n   https://eonet.sci.gsfc.nasa.gov/api/v2.1/events */\r\nasync function JSONLoader(fileLocation) {\r\n  const vectorSource = new Vector();\r\n\r\n  const response = await fetch(fileLocation);\r\n  const { events } = await response.json();\r\n\r\n  const fires = [];\r\n\r\n  for (const event of events) {\r\n    if (event.categories[0].id === 8) {\r\n      const coords = fromLonLat(event.geometries[0].coordinates);\r\n\r\n      fires.push(\r\n        new Feature({\r\n          id: event.id || 0,\r\n          title: event.title || 0,\r\n          link: event.link || 0,\r\n          \"Time seen\": event.geometries[0].date || 0,\r\n          geometry: new Point(coords),\r\n        })\r\n      );\r\n    }\r\n  }\r\n\r\n  vectorSource.addFeatures(fires);\r\n\r\n  return vectorSource;\r\n}\r\n\r\nexport default JSONLoader;\r\n","import { useState, useEffect } from \"react\";\nimport Map from \"./components/Map\";\nimport Loader from \"./components/Loader\";\nimport Footer from \"./components/Footer\";\nimport CSVLoader from \"./components/CSVLoad\";\nimport JSONLoader from \"./components/JSONLoad\";\n\nconst App = () => {\n  const [fileType, setFileType] = useState(\"json\");\n  const [fireData, setFireData] = useState(null);\n  const [loading, setLoading] = useState(false);\n\n  // Fetch fire data from CSV, JSON, or API\n  useEffect(() => {\n    const fetchFires = async () => {\n      let response = null;\n      setLoading(true);\n\n      if (fileType === \"csv\") {\n        response = await CSVLoader(\"/data/nasafiredata.csv\");\n      } else if (fileType === \"json\") {\n        response = await JSONLoader(\"/data/nasafireevents.json\");\n      } else if (fileType === \"api\") {\n        response = await JSONLoader(\n          \"https://eonet.sci.gsfc.nasa.gov/api/v2.1/events\"\n        );\n      }\n      setFireData(response);\n      setLoading(false);\n    };\n\n    fetchFires();\n  }, [fileType]);\n\n  return (\n    <div>\n      {!loading ? <Map fireData={fireData} fileType={fileType} /> : <Loader />}\n      <Footer setFile={setFileType} />\n    </div>\n  );\n};\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}